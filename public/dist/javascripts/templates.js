angular.module('templates', []).run(['$templateCache', function($templateCache) {$templateCache.put('/templates/angular-binding-construction-template.ejs','<div id="angular-binding-construction">\r\n    <h3>Angular Binding after Constructing User Input <danger-circle></danger-circle></h3>\r\n    <p style="margin-top: 12px;">In this case, the user input has been taken and using some DOM manipulation such as jQuery or jqLite\r\n    \tthe raw user input has been injected into the HTML element that will be rendered. <b>Avoid creating your element or modifying the \r\n    \tattributes of an existing element with values taken from user input</b>. Notice how the element that is compiled has className being directly\r\n    \tuser input so it does not get the protection of interpolation mentioned before. The <b>$compile</b> function causes the JS to execute \r\n    \twhich could be called natively (when a DOM element is loaded and Angular needs to bind to the HTML to make it dynamic) or in the \r\n    \tcode of the application which calls $compile for whatever reason.</p>\r\n\t<div style="font-size: 18px;">\r\n\t\t\t<code>$scope.createElement = function() { </code><br/>\r\n\t\t\t<code class="tab-1">var element = document.createElement(\'div\');</code><br/>\r\n\t\t\t<code class="tab-1">element.className = $scope.constructionText;</code><br/>\r\n\t\t\t<code class="tab-1">angular.element(\'#construction-text-container\').append(element);</code><br/>\r\n\t\t\t<code class="tab-1">$compile(element)($scope);</code><br/>\r\n\t\t\t<code>};</code><br/>\r\n\t\t\t<code>// dangerous element could be compiled here <span ng-non-bindable>&lt;div class=&quot;{{(_=\'\'.sub).call... \'alert(hackMessage)\')()}} ng-scope&quot;&gt;&lt;/div&gt;</span></code><br/>\r\n\t</div>\r\n\r\n    <one-input-two-buttons \r\n    \tinput-text-key="constructionText" \r\n    \tinput-text-model="sharedDynamicData.constructionText"\r\n\t\t\thack-input-text="hackSandBoxText"\r\n\t\t\tpopulate-button-label="Populate with Sandbox Escape Text"\r\n\t\t\tsubmit-button-label="Create Element"\r\n\t\t\tis-inherited="true"\r\n\t\t\tinherited-submit-fn="createElement()"></one-input-two-buttons>\r\n\r\n    <div id="construction-text-container" style="display: none;"></div>\r\n  \t<div class="live"><code>{{sharedDynamicData.constructCompiled}}</code></div>\r\n</div>');
$templateCache.put('/templates/angular-interpolation-template.ejs','<div id="angular-interpolation">\r\n  <h3>Angular Interpolation of User Input <safe-circle></safe-circle></h3>\r\n  <p style="margin-top: 12px;">The element will use interpolation of the user input to place it into the HTML (Note: this is safe as \r\n  \tinterpolationText will be interpolated to a string and not executed)</p>\r\n  \t\r\n\t<div style="font-size: 18px;"><code ng-non-bindable>&lt;div id=&quot;{{interpolationText}}&quot;&gt;&lt;/div&gt;</code></div>\r\n\r\n  <one-input-two-buttons \r\n  \tinput-text-key="interpolationText" \r\n  \tinput-text-model="sharedDynamicData.interpolationText"\r\n\t\thack-input-text="hackSandBoxText"\r\n\t\tpopulate-button-label="Populate with Sandbox Escape Text"\r\n\t\tsubmit-button-label="Save"\r\n\t\tstatus-message="sharedDynamicData.statusMessage"\r\n\t\tis-dangerous="sharedDynamicData.isDangerous"\r\n\t\tis-safe="true"\r\n\t\ttext-same-hack-label="Refresh page to see that the JS becomes string and is not executed"\r\n\t\ttext-different-hack-label="Refresh page to see input stored"\r\n\t\tstart-timer="startTimer()"></one-input-two-buttons>\r\n\r\n  <div class="live" id="{{sharedDynamicData.interpolationText}}">\r\n  \t<code>&lt;div id=&quot;{{sharedDynamicData.interpolationText}}&quot;&gt;&lt;/div&gt;</code>\r\n  </div>\r\n</div>');
$templateCache.put('/templates/introduction-template.ejs','<div id="introduction">\r\n\t<h3>Introduction</h3>\r\n    <p style="margin-top: 12px;">XSS or cross-site scripting is a security flaw that exists when an attacker can execute JavaScript\r\n    \ton another user\'s browser. This is a serious concern because normally only the website\'s code and possibly the user\'s code will\r\n    \tbe running on a page (no code from an additional third-party). XSS enables attackers to inject client-side scripts into web pages \r\n    \tviewed by other users. A cross-site scripting  vulnerability may be used by attackers to gain access to other users\' credentials or to submit requests on their behalf.</p>\r\n\r\n    <p style="margin-top: 12px;">This issue can usually occur in two ways in an Angular application: server template of user inputs or \r\n    \tthrough clever manipulation of the Angular\'s compilation/binding of the DOM. For the latter case, there is a sandbox in place\r\n    \tthat prevents execution of unsafe JavaScript but there are ways to bypass this. The code to bypass is dependent on the Angular \r\n    \tversion as seen here (http://blog.portswigger.net/2016/01/xss-without-html-client-side-template.html) but the one for Angular 1.2.16  will be used in this demo:<p>\r\n\r\n    <div style="margin-top: 12px; font-size: 18px;">\r\n    \t<code ng-non-bindable>{{(_=\'\'.sub).call.call({}[$=\'constructor\'].getOwnPropertyDescriptor(_.__proto__,$).value,0,\'alert(hackMessage)\')()}}</code>\r\n    </div>\r\n    \r\n    <p style="margin-top: 12px;">In this demo, refreshing the page signifies a new user meaning that if any JavaScript executes from the\r\n    \tprevious session, then it shows the website has been hacked as an attacker has executed JavaScript on a clean site / other user.\r\n    \tThis can be identified by an alert message on refresh <i class="fa fa-smile-o" aria-hidden="true"></i> .<p>\r\n</div>');
$templateCache.put('/templates/ng-bind-html-user-input-template.ejs','<div id="ng-bind-html-user-input">\r\n  <h3>Ng-Bind-Html User Input <safe-circle></safe-circle></h3>\r\n\r\n  <p style="margin-top: 12px;">The ng-bind-html directive does not call the $compile function so it is safe to include user input using any method. </p>\r\n  \r\n  <div style="font-size: 18px;">\r\n\t\t<code>$templateCache.put(\'htmlContentUrl\', \'&lt;div id=&quot;\' + $scope.ngIncludeText + \'&quot;&gt;&lt;/div&gt;\'); </code><br/>\r\n\t\t<code>$scope.loadedDB = true; </code><br/> <br/>\r\n\t\t<code>// in the HTML (&lt;div ng-include=&quot;\'htmlContentUrl\'&quot; ng-if=&quot;loadedDB&quot;&gt;&lt;/div&gt;)</code>\r\n\t</div>\r\n\r\n  <div class="compiled" ng-bind-html="sharedDynamicData.ngBindHtmlFull" style="display: none;"></div>\r\n\r\n  <one-input-two-buttons \r\n  \tinput-text-key="ngBindHtmlText" \r\n  \tinput-text-model="sharedDynamicData.ngBindHtmlText"\r\n\t\thack-input-text="hackSandBoxText"\r\n\t\tpopulate-button-label="Populate with Sandbox Escape Text"\r\n\t\tsubmit-button-label="Save"\r\n\t\tstatus-message="sharedDynamicData.statusMessage"\r\n\t\tis-dangerous="sharedDynamicData.isDangerous"\r\n\t\tis-safe="true"\r\n\t\ttext-same-hack-label="Refresh page to see that the JS becomes string and is not executed"\r\n\t\ttext-different-hack-label="Refresh page to see input stored"\r\n\t\tstart-timer="startTimer()"></one-input-two-buttons>\r\n\r\n  <div class="live">\r\n\t\t<code>&lt;div ng-bind-html=&quot;ngBindHtmlFull&quot;&gt;&lt;/div&gt;</code><br/>\r\n\t\t<code class="tab-1">{{sharedDynamicData.ngBindHtmlFull}}</code> <br/>\r\n\t\t<code>&lt;div&gt;&lt;/div&gt;</code>\r\n\t</div>\r\n\t\r\n</div>');
$templateCache.put('/templates/ng-include-without-interpolation-template.ejs','<div id="ng-include-without-interpolation">\r\n  <h3>Ng-Include User Input without Interpolation <danger-circle></danger-circle></h3>\r\n\r\n  <p style="margin-top: 12px;">$compile is called for ng-include as seen below. Notice how it is concatenation (which does not protect) and not interpolation.</p>\r\n  \r\n  <div style="font-size: 18px;">\r\n\t\t<code>$templateCache.put(\'htmlContentUrl\', \'&lt;div id=&quot;\' + $scope.ngIncludeText + \'&quot;&gt;&lt;/div&gt;\'); </code><br/>\r\n\t\t<code>$scope.loadedDB = true; </code><br/> <br/>\r\n\t\t<code>// in the HTML (&lt;div ng-include=&quot;\'htmlContentUrl\'&quot; ng-if=&quot;loadedDB&quot;&gt;&lt;)</code>\r\n\t</div>\r\n\t\r\n  <div class="compiled" ng-include="\'htmlContentUrl\'" ng-if="sharedDynamicData.loadedDB" onload="onNgIncludeComplete()" style="display: none;"></div>\r\n\r\n  <one-input-two-buttons \r\n  \tinput-text-key="ngIncludeText" \r\n  \tinput-text-model="sharedDynamicData.ngIncludeText"\r\n\t\thack-input-text="hackSandBoxText"\r\n\t\tpopulate-button-label="Populate with Sandbox Escape Text"\r\n\t\tsubmit-button-label="Save"\r\n\t\tstatus-message="sharedDynamicData.statusMessage"\r\n\t\tis-dangerous="sharedDynamicData.isDangerous"\r\n\t\ttext-same-hack-label="Refresh page to see the hacker\'s effect"\r\n\t\ttext-different-hack-label="Refresh page to see input stored"\r\n\t\tstart-timer="startTimer()"></one-input-two-buttons>\r\n\r\n  <div class="live">\r\n\t\t<code>&lt;div ng-include=&quot;\'htmlContentUrl\'&quot; ng-if=&quot;loadedDB&quot;&gt;</code><br/>\r\n\t\t<code class="tab-1">{{sharedDynamicData.ngIncludeCompiled}}</code> <br/>\r\n\t\t<code>&lt;div&gt;&lt;/div&gt;</code>\r\n\t</div>\r\n</div>');
$templateCache.put('/templates/one-input-two-buttons-template.ejs','<div class="flex-container one-input-two-buttons">\r\n    <input type="text" ng-model="inputTextModel">\r\n    <button type="button" class="btn btn-default" ng-click="populateInputText()" ng-bind="populateButtonLabel"></button>\r\n    <button type="button" class="btn btn-primary" ng-click="submitTextFields()" ng-bind="submitButtonLabel"></button>\r\n</div>');}]);